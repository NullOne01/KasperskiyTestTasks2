using System;
using System.Collections.Generic;
using System.IO;
using scan_service.Data;

namespace scan_service.Scanner
{
    public class MalwareScanner
    {
        private MalwareFileParser _malwareFileParser = new MalwareFileParser();

        public ScanResult ScanDirectory(DirectoryInfo directory)
        {
            ScanResult scanResult = new ScanResult();

            var watch = new System.Diagnostics.Stopwatch();
            watch.Start();
            ScanDirectoryBfs(scanResult, directory);
            watch.Stop();

            scanResult.ExecutionTime = watch.ElapsedMilliseconds;
            return scanResult;
        }

        private void ScanDirectoryBfs(ScanResult scanResult, DirectoryInfo directory)
        {
            Queue<DirectoryInfo> visitedDirs = new Queue<DirectoryInfo>();
            visitedDirs.Enqueue(directory);

            while (visitedDirs.Count > 0)
            {
                try
                {
                    DirectoryInfo currentDir = visitedDirs.Dequeue();

                    ProcessFilesInDirectory(scanResult, currentDir);

                    DirectoryInfo[] children = currentDir.GetDirectories();
                    foreach (DirectoryInfo child in children)
                    {
                        visitedDirs.Enqueue(child);
                    }
                }
                catch (UnauthorizedAccessException)
                {
                    continue;
                }
            }
        }

        private void ProcessFilesInDirectory(ScanResult scanResult, DirectoryInfo directory)
        {
            foreach (var fileInfo in directory.GetFiles())
            {
                try
                {
                    string malwareName = _malwareFileParser.ParseFile(fileInfo);
                    scanResult.FileProcessedNum++;
                    if (!string.IsNullOrEmpty(malwareName))
                    {
                        scanResult.LoadMalwareName(malwareName);
                    }
                }
                catch (IOException)
                {
                    scanResult.ErrorsNum++;
                }
            }
        }
    }
}